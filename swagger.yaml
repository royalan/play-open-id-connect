openapi: "3.0.0"
info:
  version: 0.0.1
  title: Open ID Connect Service
servers:
  - url: http://localhost:9000
paths:
  /login:
    post:
      summary: Login to service
      operationId: login
      tags:
        - users
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginForm'
      responses:
        '303':
          description: Redirect to previous page or homepage.
        '400':
          description: Wrong format of parameters.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: Incorrect sign in information
        '500':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /oauth2/v1/auth:
    get:
      summary: Authorize client to retrieve tokens or information of user.
      operationId: authClient
      tags:
        - auth
      parameters:
        - in: query
          name: client_id
          required: true
          description: 'The client ID string that you obtain from us.'
          schema:
            type: string
            default: 'client123'
        - in: query
          name: response_type
          required: true
          description: |
            If the value is code, launches a Basic flow, requiring a POST to the token endpoint to obtain the tokens. If the value is token id_token or id_token token, launches an Implicit flow, requiring the use of Javascript at the redirect URI to retrieve tokens from the URI #fragment.
          schema:
            type: string
            enum: [code, token, id_token, code id_token, token id_token]
            default: 'code id_token'
        - in: query
          name: scope
          required: true
          description: 'Now we only support string "openid" which could be get user public information.'
          schema:
            type: string
            enum: [openid]
            default: 'openid'
        - in: query
          name: redirect_uri
          required: true
          description: |
            Determines where the response is sent. The value of this parameter must exactly match one of the values that you apply to us(including the HTTP or HTTPS scheme, case, and trailing '/', if any).
          schema:
            type: string
            default: 'https://www.google.com'
        - name: nonce
          in: query
          required: true
          description: |
            A random value generated by your app that enables replay protection. This value will include in "id_token" and you should verify it as a trusted response.
          schema:
            type: string
            default: '1do2h89fp-adm2m30#$29'
        - name: state
          in: query
          required: false
          description: |
            Strongly recommended. An opaque string that is round-tripped in the protocol; that is to say, it is returned as a URI parameter in the Basic flow, and in the URI #fragment in the Implicit flow.
          schema:
            type: string
            default: '3j80fj093jf#12@#43f'
        - name: prompt
          in: query
          required: false
          description: |
            <p>A space-delimited list of string values that specifies whether the authorization server prompts the user for reauthentication and consent. The possible values are:</p>
              none<br>
                <blockquote>The authorization server does not display any authentication or user consent screens; it will return an error if the user is not already authenticated and has not pre-configured consent for the requested scopes. You can use none to check for existing authentication and/or consent.</blockquote>
              consent<br>
                <blockquote>The authorization server prompts the user for consent before returning information to the client.</blockquote>
              login<br>
                <blockquote>The authorization server prompts the user to login. If user already sign-in, page will direct to consent page.</blockquote>
            If no value is specified and the user has not previously authorized access, then the user is shown a consent screen.
          schema:
            enum: [none, consent, login]
            type: string
        - name: display
          in: query
          required: false
          description: |
            'An ASCII string value for specifying how the authorization server displays the authentication and consent user interface pages. The following values are specified, and accepted by the Google servers, but do not have any effect on its behavior: page, popup, touch, and wap.'
          schema:
            enum: [page, popup, touch, wap]
            type: string
      responses:
        '303':
          description: 'Redirect to redirect_uri and flow with code, token or id_token which depends on response_type'
        '400':
          description: 'Wrong paramters'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /oauth2/v1/consent:
    post:
      summary: User consent to client which could get information from service.
      operationId: userConsent
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserConsentForm'
      responses:
        '303':
          description: Redirect to redirect_uri with code or error information
        '500':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /oauth2/v1/token:
    post:
      summary: Exchange grant code with access token
      operationId: createToken
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTokenReq'
      responses:
        '303':
          description: Redirect to redirect_uri with token or error information
        '500':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /health/heartbeat:
    get:
      summary: Check service is alive.
      operationId: heartbeat
      tags:
        - health
      responses:
        '200':
          description: Service is alive.
        '500':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /health/status:
    get:
      summary: Check service status.
      operationId: status
      tags:
        - health
      responses:
        '200':
          description: Service is alive.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: '200'
        '500':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    LoginForm:
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          default: "royalan"
        password:
          type: string
          format: password
          default: "123"
    UserConsentForm:
      required:
        - clientID
        - scopes
      properties:
        clientID:
          type: string
          default: "client123"
        scopes:
          type: string
          default: "openid"
    CreateTokenReq:
      required:
        - code
        - redirect_uri
        - grant_type
      properties:
        code:
          type: string
          default: "0h/gjFLGy9y6Cfdc"
        redirect_uri:
          type: string
          default: "https://www.google.com"
        grant_type:
          type: string
          enum: [authorization_code]
          default: "authorization_code"
    Error:
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
          default: 99999
        message:
          type: string
          default: "UNKNOWN_ERROR"